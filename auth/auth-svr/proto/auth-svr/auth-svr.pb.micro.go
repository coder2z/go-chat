// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth-svr.proto

package go_micro_chat_auth_service_authsvr

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthSvr service

func NewAuthSvrEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthSvr service

type AuthSvrService interface {
	Login(ctx context.Context, in *Request, opts ...client.CallOption) (*LoginResponse, error)
	Info(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*InfoResponse, error)
	Register(ctx context.Context, in *Request, opts ...client.CallOption) (*RegisterResponse, error)
}

type authSvrService struct {
	c    client.Client
	name string
}

func NewAuthSvrService(name string, c client.Client) AuthSvrService {
	return &authSvrService{
		c:    c,
		name: name,
	}
}

func (c *authSvrService) Login(ctx context.Context, in *Request, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "AuthSvr.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvrService) Info(ctx context.Context, in *InfoRequest, opts ...client.CallOption) (*InfoResponse, error) {
	req := c.c.NewRequest(c.name, "AuthSvr.Info", in)
	out := new(InfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSvrService) Register(ctx context.Context, in *Request, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "AuthSvr.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthSvr service

type AuthSvrHandler interface {
	Login(context.Context, *Request, *LoginResponse) error
	Info(context.Context, *InfoRequest, *InfoResponse) error
	Register(context.Context, *Request, *RegisterResponse) error
}

func RegisterAuthSvrHandler(s server.Server, hdlr AuthSvrHandler, opts ...server.HandlerOption) error {
	type authSvr interface {
		Login(ctx context.Context, in *Request, out *LoginResponse) error
		Info(ctx context.Context, in *InfoRequest, out *InfoResponse) error
		Register(ctx context.Context, in *Request, out *RegisterResponse) error
	}
	type AuthSvr struct {
		authSvr
	}
	h := &authSvrHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthSvr{h}, opts...))
}

type authSvrHandler struct {
	AuthSvrHandler
}

func (h *authSvrHandler) Login(ctx context.Context, in *Request, out *LoginResponse) error {
	return h.AuthSvrHandler.Login(ctx, in, out)
}

func (h *authSvrHandler) Info(ctx context.Context, in *InfoRequest, out *InfoResponse) error {
	return h.AuthSvrHandler.Info(ctx, in, out)
}

func (h *authSvrHandler) Register(ctx context.Context, in *Request, out *RegisterResponse) error {
	return h.AuthSvrHandler.Register(ctx, in, out)
}
